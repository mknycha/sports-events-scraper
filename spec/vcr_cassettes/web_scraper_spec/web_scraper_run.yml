---
http_interactions:
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session
    body:
      encoding: UTF-8
      string: '{"desiredCapabilities":{"browserName":"chrome","version":"","platform":"ANY","javascriptEnabled":true,"cssSelectorsEnabled":true,"takesScreenshot":false,"nativeEvents":false,"rotatable":false,"chromeOptions":{"args":["disable-infobars","headless"]}},"capabilities":{"firstMatch":[{"browserName":"chrome"}]}}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '307'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 29 Jan 2019 18:01:35 GMT
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '1058'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: |-
        {
          "status": 0,
          "sessionId": "805ae56e4cc5ab2e607fec7582a3d036",
          "value": {
            "acceptInsecureCerts": false,
            "acceptSslCerts": false,
            "applicationCacheEnabled": false,
            "browserConnectionEnabled": false,
            "browserName": "chrome",
            "chrome": {
              "chromedriverVersion": "2.40.565383 (76257d1ab79276b2d53ee976b2c3e3b9f335cde7)",
              "userDataDir": "\u002ftmp\u002f.org.chromium.Chromium.IZScXS"
            },
            "cssSelectorsEnabled": true,
            "databaseEnabled": false,
            "handlesAlerts": true,
            "hasTouchScreen": false,
            "javascriptEnabled": true,
            "locationContextEnabled": true,
            "mobileEmulationEnabled": false,
            "nativeEvents": true,
            "networkConnectionEnabled": false,
            "pageLoadStrategy": "normal",
            "platform": "Linux",
            "rotatable": false,
            "setWindowRect": true,
            "takesHeapSnapshot": true,
            "takesScreenshot": true,
            "unexpectedAlertBehaviour": "",
            "version": "67.0.3396.99",
            "webStorageEnabled": true,
            "webdriver.remote.sessionid": "805ae56e4cc5ab2e607fec7582a3d036"
          }
        }
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:39 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/timeouts/implicit_wait
    body:
      encoding: UTF-8
      string: '{"ms":30000}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '12'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:39 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/url
    body:
      encoding: UTF-8
      string: '{"url":"https://secure-refuge-50060.herokuapp.com"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '51'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"ip_sport_9_types"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '41'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '102'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.8838112700370322-1"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-1/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"tableData"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '42'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '139'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.8838112700370322-2"},{"ELEMENT":"0.8838112700370322-3"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-2/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"rowLive"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '40'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.8838112700370322-4"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-4/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//td/a[@href]"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '42'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '102'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.8838112700370322-5"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-5/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '95'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"West
        Brom   v   Brentford"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-5/attribute/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '152'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"https://secure-refuge-50060.herokuapp.com/betting/e/13798748/West+Brom+v+Brentford"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-4/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"Score"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '139'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.8838112700370322-6"},{"ELEMENT":"0.8838112700370322-7"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-6/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '75'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"53:03"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-7/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1-0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-3/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"rowLive"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '40'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '139'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.8838112700370322-8"},{"ELEMENT":"0.8838112700370322-9"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-8/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//td/a[@href]"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '42'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.8838112700370322-10"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-10/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '99'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"Dep.
        Riestra   v   JJ Urquiza"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-10/attribute/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '156'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"https://secure-refuge-50060.herokuapp.com/betting/e/13819684/Dep.+Riestra+v+JJ+Urquiza"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-8/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"Score"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '141'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.8838112700370322-11"},{"ELEMENT":"0.8838112700370322-12"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-11/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '75'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"45:00"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-12/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"2-0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-9/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//td/a[@href]"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '42'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.8838112700370322-13"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-13/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '101'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"Barracas
        Central   v   All Boys"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-13/attribute/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '158'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"https://secure-refuge-50060.herokuapp.com/betting/e/13819672/Barracas+Central+v+All+Boys"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-9/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"Score"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '141'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.8838112700370322-14"},{"ELEMENT":"0.8838112700370322-15"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-14/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '75'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"54:00"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.8838112700370322-15/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0-1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:50 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/url
    body:
      encoding: UTF-8
      string: '{"url":"https://secure-refuge-50060.herokuapp.com/betting/e/13798748/West+Brom+v+Brentford"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '92'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:53 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/source
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '575079'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:53 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"scoreboard_frame"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '41'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '102'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.5764790588322706-1"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:53 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.5764790588322706-1/element
    body:
      encoding: UTF-8
      string: '{"using":"tag name","value":"iframe"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '102'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.5764790588322706-2"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:53 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/execute
    body:
      encoding: UTF-8
      string: '{"script":"return arguments[0][arguments[1]]","args":[{"ELEMENT":"0.5764790588322706-2"},"src"]}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '96'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '158'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"https://secure-refuge-50060.herokuapp.com/betting/e/13798748/West+Brom+v+Brentford/stats"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:53 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/url
    body:
      encoding: UTF-8
      string: '{"url":"https://secure-refuge-50060.herokuapp.com/betting/e/13798748/West+Brom+v+Brentford/stats"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '98'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//li[@data-period=''SECOND_HALF'']"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '61'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-1"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-1/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '70'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":""}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-1/click
    body:
      encoding: UTF-8
      string: "{}"
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '2'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"stats_wrapper"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-2"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-2/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"stat-wrapper"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '45'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '432'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.39647433429534207-3"},{"ELEMENT":"0.39647433429534207-4"},{"ELEMENT":"0.39647433429534207-5"},{"ELEMENT":"0.39647433429534207-6"},{"ELEMENT":"0.39647433429534207-7"},{"ELEMENT":"0.39647433429534207-8"},{"ELEMENT":"0.39647433429534207-9"},{"ELEMENT":"0.39647433429534207-10"},{"ELEMENT":"0.39647433429534207-11"},{"ELEMENT":"0.39647433429534207-12"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-3/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-13"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-13/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '88'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _shotsontarget"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-3/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-14"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-14/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-3/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-15"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-15/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:54 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-4/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-16"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-16/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '89'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _shotsofftarget"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-4/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-17"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-17/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-4/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-18"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-18/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"3"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-5/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-19"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-19/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '88'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _shotswoodwork"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-5/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-20"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-20/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-5/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-21"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-21/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-6/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-22"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-22/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '81'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _danger"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-6/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-23"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-23/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"3"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-6/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-24"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-24/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"6"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-7/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-25"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-25/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '82'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _corners"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-7/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-26"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-26/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-7/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-27"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-27/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-8/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-28"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-28/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '84'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _freekicks"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-8/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-29"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-29/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-8/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-30"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-30/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-9/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-31"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-31/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '83'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _goalkick"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-9/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-32"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-32/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:55 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-9/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-33"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-33/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"7"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-10/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-34"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-34/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '83'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _throwins"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-10/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-35"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-35/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"16"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-10/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-36"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-36/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"17"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-11/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-37"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-37/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '84'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _penalties"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-11/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-38"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-38/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-11/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-39"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-39/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-12/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-40"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-40/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '85'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _possession"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-12/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-41"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-41/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '70'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":""}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-12/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-42"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-42/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '70'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":""}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//li[@data-period=''TOTAL'']"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '55'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-43"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-43/click
    body:
      encoding: UTF-8
      string: "{}"
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '2'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"stats_wrapper"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-2"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-2/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//div[@data-stat=''possession'']"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '59'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-44"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-44/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-41"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-41/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"55%"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-44/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.39647433429534207-42"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.39647433429534207-42/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"45%"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:56 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/url
    body:
      encoding: UTF-8
      string: '{"url":"https://secure-refuge-50060.herokuapp.com/betting/e/13819672/Barracas+Central+v+All+Boys"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '98'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:59 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/source
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '575085'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:59 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"scoreboard_frame"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '41'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.27805371285504354-1"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:59 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.27805371285504354-1/element
    body:
      encoding: UTF-8
      string: '{"using":"tag name","value":"iframe"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.27805371285504354-2"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:59 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/execute
    body:
      encoding: UTF-8
      string: '{"script":"return arguments[0][arguments[1]]","args":[{"ELEMENT":"0.27805371285504354-2"},"src"]}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '97'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '164'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"https://secure-refuge-50060.herokuapp.com/betting/e/13819672/Barracas+Central+v+All+Boys/stats"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:01:59 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/url
    body:
      encoding: UTF-8
      string: '{"url":"https://secure-refuge-50060.herokuapp.com/betting/e/13819672/Barracas+Central+v+All+Boys/stats"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '104'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//li[@data-period=''SECOND_HALF'']"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '61'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-1"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-1/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '70'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":""}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-1/click
    body:
      encoding: UTF-8
      string: "{}"
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '2'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"stats_wrapper"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-2"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-2/elements
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"stat-wrapper"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '45'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '432'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":[{"ELEMENT":"0.03851761970449763-3"},{"ELEMENT":"0.03851761970449763-4"},{"ELEMENT":"0.03851761970449763-5"},{"ELEMENT":"0.03851761970449763-6"},{"ELEMENT":"0.03851761970449763-7"},{"ELEMENT":"0.03851761970449763-8"},{"ELEMENT":"0.03851761970449763-9"},{"ELEMENT":"0.03851761970449763-10"},{"ELEMENT":"0.03851761970449763-11"},{"ELEMENT":"0.03851761970449763-12"}]}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-3/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-13"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-13/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '88'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _shotsontarget"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:00 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-3/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-14"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-14/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"2"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-3/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-15"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-15/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-4/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-16"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-16/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '89'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _shotsofftarget"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-4/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-17"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-17/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"3"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-4/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-18"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-18/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"2"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-5/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-19"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-19/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '88'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _shotswoodwork"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-5/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-20"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-20/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-5/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-21"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-21/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-6/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-22"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-22/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '81'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _danger"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-6/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-23"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-23/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"7"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-6/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-24"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-24/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"3"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-7/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-25"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-25/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '82'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _corners"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-7/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-26"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-26/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"2"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-7/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-27"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-27/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-8/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-28"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-28/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '84'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _freekicks"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-8/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-29"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-29/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-8/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-30"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:01 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-30/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-9/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-31"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-31/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '83'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _goalkick"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-9/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-32"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-32/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"1"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-9/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-33"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-33/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"7"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-10/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-34"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-34/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '83'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _throwins"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-10/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-35"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-35/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"16"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-10/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-36"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-36/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"17"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-11/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-37"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-37/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '84'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _penalties"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-11/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-38"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-38/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-11/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-39"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-39/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '71'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"0"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-12/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"img"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '36'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-40"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-40/attribute/class
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '85'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"img
        _possession"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-12/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-41"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-41/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '70'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":""}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-12/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-42"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-42/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '70'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":""}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//li[@data-period=''TOTAL'']"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '55'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-43"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-43/click
    body:
      encoding: UTF-8
      string: "{}"
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '2'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element
    body:
      encoding: UTF-8
      string: '{"using":"id","value":"stats_wrapper"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '38'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '103'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-2"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-2/element
    body:
      encoding: UTF-8
      string: '{"using":"xpath","value":".//div[@data-stat=''possession'']"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '59'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-44"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-44/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"home"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-41"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-41/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"62%"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: post
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-44/element
    body:
      encoding: UTF-8
      string: '{"using":"class name","value":"away"}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Content-Length:
      - '37'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '104'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":{"ELEMENT":"0.03851761970449763-42"}}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: get
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036/element/0.03851761970449763-42/text
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Cache-Control:
      - no-cache
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '73'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":"38%"}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:02 GMT
- request:
    method: delete
    uri: http://localhost:4444/wd/hub/session/805ae56e4cc5ab2e607fec7582a3d036
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json; charset=UTF-8
      User-Agent:
      - selenium/3.12.0 (ruby macosx)
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      Cache-Control:
      - no-cache
      Content-Type:
      - application/json;charset=utf-8
      Content-Length:
      - '72'
      Server:
      - Jetty(9.4.7.v20170914)
    body:
      encoding: UTF-8
      string: '{"sessionId":"805ae56e4cc5ab2e607fec7582a3d036","status":0,"value":null}'
    http_version: 
  recorded_at: Tue, 29 Jan 2019 18:02:03 GMT
recorded_with: VCR 4.0.0
